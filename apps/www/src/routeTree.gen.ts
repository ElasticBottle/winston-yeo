/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { createServerRootRoute } from '@tanstack/react-start/server'

import { Route as rootRouteImport } from './routes/__root'
import { Route as LoginRouteImport } from './routes/login'
import { Route as AboutRouteImport } from './routes/about'
import { Route as ArticlesRouteRouteImport } from './routes/articles/route'
import { Route as AuthedRouteRouteImport } from './routes/_authed/route'
import { Route as IndexRouteImport } from './routes/index'
import { Route as ArticlesIndexRouteImport } from './routes/articles/index'
import { Route as ArticlesSlugRouteImport } from './routes/articles/$slug'
import { Route as AuthedOrpcRouteImport } from './routes/_authed/orpc'
import { ServerRoute as ApiSplatServerRouteImport } from './routes/api/$'
import { ServerRoute as ApiRpcSplatServerRouteImport } from './routes/api/rpc.$'

const rootServerRouteImport = createServerRootRoute()

const LoginRoute = LoginRouteImport.update({
  id: '/login',
  path: '/login',
  getParentRoute: () => rootRouteImport,
} as any)
const AboutRoute = AboutRouteImport.update({
  id: '/about',
  path: '/about',
  getParentRoute: () => rootRouteImport,
} as any)
const ArticlesRouteRoute = ArticlesRouteRouteImport.update({
  id: '/articles',
  path: '/articles',
  getParentRoute: () => rootRouteImport,
} as any)
const AuthedRouteRoute = AuthedRouteRouteImport.update({
  id: '/_authed',
  getParentRoute: () => rootRouteImport,
} as any)
const IndexRoute = IndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRouteImport,
} as any)
const ArticlesIndexRoute = ArticlesIndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => ArticlesRouteRoute,
} as any)
const ArticlesSlugRoute = ArticlesSlugRouteImport.update({
  id: '/$slug',
  path: '/$slug',
  getParentRoute: () => ArticlesRouteRoute,
} as any)
const AuthedOrpcRoute = AuthedOrpcRouteImport.update({
  id: '/orpc',
  path: '/orpc',
  getParentRoute: () => AuthedRouteRoute,
} as any)
const ApiSplatServerRoute = ApiSplatServerRouteImport.update({
  id: '/api/$',
  path: '/api/$',
  getParentRoute: () => rootServerRouteImport,
} as any)
const ApiRpcSplatServerRoute = ApiRpcSplatServerRouteImport.update({
  id: '/api/rpc/$',
  path: '/api/rpc/$',
  getParentRoute: () => rootServerRouteImport,
} as any)

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/articles': typeof ArticlesRouteRouteWithChildren
  '/about': typeof AboutRoute
  '/login': typeof LoginRoute
  '/orpc': typeof AuthedOrpcRoute
  '/articles/$slug': typeof ArticlesSlugRoute
  '/articles/': typeof ArticlesIndexRoute
}
export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/about': typeof AboutRoute
  '/login': typeof LoginRoute
  '/orpc': typeof AuthedOrpcRoute
  '/articles/$slug': typeof ArticlesSlugRoute
  '/articles': typeof ArticlesIndexRoute
}
export interface FileRoutesById {
  __root__: typeof rootRouteImport
  '/': typeof IndexRoute
  '/_authed': typeof AuthedRouteRouteWithChildren
  '/articles': typeof ArticlesRouteRouteWithChildren
  '/about': typeof AboutRoute
  '/login': typeof LoginRoute
  '/_authed/orpc': typeof AuthedOrpcRoute
  '/articles/$slug': typeof ArticlesSlugRoute
  '/articles/': typeof ArticlesIndexRoute
}
export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | '/articles'
    | '/about'
    | '/login'
    | '/orpc'
    | '/articles/$slug'
    | '/articles/'
  fileRoutesByTo: FileRoutesByTo
  to: '/' | '/about' | '/login' | '/orpc' | '/articles/$slug' | '/articles'
  id:
    | '__root__'
    | '/'
    | '/_authed'
    | '/articles'
    | '/about'
    | '/login'
    | '/_authed/orpc'
    | '/articles/$slug'
    | '/articles/'
  fileRoutesById: FileRoutesById
}
export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  AuthedRouteRoute: typeof AuthedRouteRouteWithChildren
  ArticlesRouteRoute: typeof ArticlesRouteRouteWithChildren
  AboutRoute: typeof AboutRoute
  LoginRoute: typeof LoginRoute
}
export interface FileServerRoutesByFullPath {
  '/api/$': typeof ApiSplatServerRoute
  '/api/rpc/$': typeof ApiRpcSplatServerRoute
}
export interface FileServerRoutesByTo {
  '/api/$': typeof ApiSplatServerRoute
  '/api/rpc/$': typeof ApiRpcSplatServerRoute
}
export interface FileServerRoutesById {
  __root__: typeof rootServerRouteImport
  '/api/$': typeof ApiSplatServerRoute
  '/api/rpc/$': typeof ApiRpcSplatServerRoute
}
export interface FileServerRouteTypes {
  fileServerRoutesByFullPath: FileServerRoutesByFullPath
  fullPaths: '/api/$' | '/api/rpc/$'
  fileServerRoutesByTo: FileServerRoutesByTo
  to: '/api/$' | '/api/rpc/$'
  id: '__root__' | '/api/$' | '/api/rpc/$'
  fileServerRoutesById: FileServerRoutesById
}
export interface RootServerRouteChildren {
  ApiSplatServerRoute: typeof ApiSplatServerRoute
  ApiRpcSplatServerRoute: typeof ApiRpcSplatServerRoute
}

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/login': {
      id: '/login'
      path: '/login'
      fullPath: '/login'
      preLoaderRoute: typeof LoginRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/about': {
      id: '/about'
      path: '/about'
      fullPath: '/about'
      preLoaderRoute: typeof AboutRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/articles': {
      id: '/articles'
      path: '/articles'
      fullPath: '/articles'
      preLoaderRoute: typeof ArticlesRouteRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/_authed': {
      id: '/_authed'
      path: ''
      fullPath: ''
      preLoaderRoute: typeof AuthedRouteRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/articles/': {
      id: '/articles/'
      path: '/'
      fullPath: '/articles/'
      preLoaderRoute: typeof ArticlesIndexRouteImport
      parentRoute: typeof ArticlesRouteRoute
    }
    '/articles/$slug': {
      id: '/articles/$slug'
      path: '/$slug'
      fullPath: '/articles/$slug'
      preLoaderRoute: typeof ArticlesSlugRouteImport
      parentRoute: typeof ArticlesRouteRoute
    }
    '/_authed/orpc': {
      id: '/_authed/orpc'
      path: '/orpc'
      fullPath: '/orpc'
      preLoaderRoute: typeof AuthedOrpcRouteImport
      parentRoute: typeof AuthedRouteRoute
    }
  }
}
declare module '@tanstack/react-start/server' {
  interface ServerFileRoutesByPath {
    '/api/$': {
      id: '/api/$'
      path: '/api/$'
      fullPath: '/api/$'
      preLoaderRoute: typeof ApiSplatServerRouteImport
      parentRoute: typeof rootServerRouteImport
    }
    '/api/rpc/$': {
      id: '/api/rpc/$'
      path: '/api/rpc/$'
      fullPath: '/api/rpc/$'
      preLoaderRoute: typeof ApiRpcSplatServerRouteImport
      parentRoute: typeof rootServerRouteImport
    }
  }
}

interface AuthedRouteRouteChildren {
  AuthedOrpcRoute: typeof AuthedOrpcRoute
}

const AuthedRouteRouteChildren: AuthedRouteRouteChildren = {
  AuthedOrpcRoute: AuthedOrpcRoute,
}

const AuthedRouteRouteWithChildren = AuthedRouteRoute._addFileChildren(
  AuthedRouteRouteChildren,
)

interface ArticlesRouteRouteChildren {
  ArticlesSlugRoute: typeof ArticlesSlugRoute
  ArticlesIndexRoute: typeof ArticlesIndexRoute
}

const ArticlesRouteRouteChildren: ArticlesRouteRouteChildren = {
  ArticlesSlugRoute: ArticlesSlugRoute,
  ArticlesIndexRoute: ArticlesIndexRoute,
}

const ArticlesRouteRouteWithChildren = ArticlesRouteRoute._addFileChildren(
  ArticlesRouteRouteChildren,
)

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  AuthedRouteRoute: AuthedRouteRouteWithChildren,
  ArticlesRouteRoute: ArticlesRouteRouteWithChildren,
  AboutRoute: AboutRoute,
  LoginRoute: LoginRoute,
}
export const routeTree = rootRouteImport
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()
const rootServerRouteChildren: RootServerRouteChildren = {
  ApiSplatServerRoute: ApiSplatServerRoute,
  ApiRpcSplatServerRoute: ApiRpcSplatServerRoute,
}
export const serverRouteTree = rootServerRouteImport
  ._addFileChildren(rootServerRouteChildren)
  ._addFileTypes<FileServerRouteTypes>()
